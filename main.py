import cv2
import torch
import numpy as np
import time
import utils.utils
import model.detector
import tensorflow as tf
#from tensorflow.keras.models import load_model

# Define the CSI camera pipeline
def gstreamer_pipeline(
    sensor_id=0,
    capture_width=640,
    capture_height=480,
    display_width=640,
    display_height=480,
    framerate=15,
    flip_method=0,
):
    return (
        f"nvarguscamerasrc sensor-id={sensor_id} ! "
        f"video/x-raw(memory:NVMM), width=(int){capture_width}, height=(int){capture_height}, "
        f"format=(string)NV12, framerate=(fraction){framerate}/1 ! "
        f"nvvidconv flip-method={flip_method} ! "
        f"video/x-raw, width=(int){display_width}, height=(int){display_height}, format=(string)BGRx ! "
        f"videoconvert ! video/x-raw, format=(string)BGR ! appsink"
    )

if __name__ == '__main__':
    # CSI model
    model_name= 'modelzoo/WiCount_FE_DNNR_2days.keras'
    csi_model = tf.keras.models.load_model(model_name)

    # Load configuration and model
    cfg = utils.utils.load_datafile('./data/coco.data')
    model_path = 'modelzoo/coco2017-0.241078ap-model.pth'
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = model.detector.Detector(cfg["classes"], cfg["anchor_num"], True).to(device)
    model.load_state_dict(torch.load(model_path, map_location=device))
    model.eval()

    cv_count = 0
    csi_count = 0
    fake_csi = "2.458781078209907,18.74137708,23.436087,12.873449,20.788364,16.79608325,3.9922807500000026,2.1750186168128636,18.43348778,22.899534,12.379688,20.0810315,16.817123,3.263908500000003,2.607607585309648,20.679390055,26.142578,13.959656,22.702845500000002,18.64817925,4.054666250000004,1157.5328335,2.447272630572631,20.8720570825,27.065996,14.034239,22.683862,19.26483225,3.41902975,1099.5654584999997,2.3110352014471576,21.032697629999998,27.608477,15.343101,22.717664,19.3759945,3.3416694999999983,740.660367,1.9574861642548727,19.6123906725,23.03936,14.155445,20.95387625,18.1826515,2.771224750000002,1119.5504415,2.1286296321652696,20.967886075000003,25.50049,15.543036,22.448030499999998,19.598378,2.8496524999999977,805.4005115,2.0609612107811413,20.96228289,26.67694,15.768266,22.431458,19.38324025,3.048217749999999,1043.6309434999998,2.0139137989915743,22.250151290000005,26.378353,17.08934,23.627291,21.0075715,2.6197194999999986,968.669495,2.153123055078146,22.813116545000003,28.656635,16.257668,24.10471475,21.72790225,2.3768124999999998,1194.20386,2.1014559018721046,23.536095274999997,29.279009,17.88349,24.78546025,22.21652825,2.568932,901.9603440000001,2.0587633195803314,24.657327995,30.820553,17.849499,25.86825,23.3489855,2.5192644999999985,1346.942184,1.8280087379770495,23.29784962,28.440327,17.542446,24.270937,22.250664999999998,2.020272000000002,1248.733665,1.660544915703553,22.429927699999997,25.604492,16.73933,23.5138635,21.56462725,1.9492362499999984,1222.173056,1.4590132231488033,20.216850065,23.529549,15.72037,21.168439499999998,19.501184,1.6672554999999996,1715.3187659999999,1.61130811143867,22.610688810000003,26.503265,17.337044,23.7076995,21.77562375,1.9320757499999992,1959.285055,1.6288879733459256,19.58980115,24.611368,14.112255,20.5228875,18.836609,1.6862785000000002,1364.916074,1.38642194347981,18.87932063,23.488504,14.676976,19.638322,18.1390275,1.4992944999999978,1490.2155289999998,1.312234743641432,17.751870995,21.56184,13.772763,18.6651165,17.02419875,1.6409177499999998,979.6409175,1.2945240620923353,17.7193577,21.484837,12.883803,18.542158,16.98888,1.5532779999999988,777.490006,1.6585416946165643,17.003372752500002,23.489588,13.782455,17.685866,15.975078625,1.7107873750000007,841.2199425000001,1.5851404598170717,17.6941369425,22.651482,13.9774275,18.287751,16.78471825,1.5030327499999991,1021.6325295,1.5040156393041597,16.02489693,20.512728,11.459052,16.7397005,15.08866725,1.6510332500000011,1003.4153924999999,1.413463295732989,16.24067435,20.974691,13.545976,16.789818750000002,15.25098925,1.538829500000002,880.6751350000001,1.8332376094962737,17.4755372425,23.912859,13.336262,17.9446145,16.3385225,1.6060920000000003,933.1766044999999,1.744573123356006,16.645453195,22.368982,12.887468,17.189258000000002,15.629231,1.5600270000000016,780.8726860000002,1.66133249341267,16.9308137275,21.549055,13.112153,17.73104,15.72759525,2.00344475,701.171069,1.562667283582982,17.944740205,21.88214,14.3337965,19.02124775,16.81732325,2.2039244999999994,901.700405,1.7072384196738741,17.3958011375,21.895813,14.162235,18.25158525,16.3370225,1.9145627500000018,809.0726665,2.021273274356925,18.661589120000002,25.52908,14.770582,19.732457750000002,17.140526,2.5919317500000005,1050.6832565,1.3938164001212539,16.516556169999998,20.831768,12.859728,17.3944385,15.611734875,1.782703625,1458.2066895,1.6362308477618157,18.04796732,23.996838,14.135437,18.967385,16.8858755,2.0815094999999992,884.6908775,1.8670169370842515,18.963879640000002,24.224886,15.169254,19.93610725,17.65053275,2.285574499999999,1163.9307885,1.491351540565286,18.290795392499998,22.814129,13.841007,19.247527,17.16003975,2.0874872500000023,971.416864,1.836293811095697,19.770308505,26.00242,15.821658,20.629651250000002,18.4542035,2.1754477500000036,993.8933695000001,1.847052378874552,19.642718945000002,24.513636,14.64523,20.48440825,18.426616,2.057792250000002,1023.3202295,1.6166368648953218,19.821396625000002,24.534378,16.200607,20.84804075,18.6845615,2.163479249999998,863.4360845000001,1.2919318643512296,18.39835531,22.24532,14.228673,19.19042825,17.498008499999997,1.6924197500000027,1128.6920635000001,1.561438343626209,19.5632555975,23.646135,15.5822735,20.673326499999998,18.4516265,2.2216999999999985,693.6461800000001,1.8486343018722253,19.7693401,26.231113,15.327406,20.64710925,18.53611325,2.110996,743.8832575000001,1.484413522717766,19.73488925,23.979265,15.466691,20.9107625,18.59655125,2.3142112499999996,736.3793505,1.469094167947618,19.272007310000003,23.600594,15.042332,20.33947775,18.298256,2.041221750000002,848.5217305,1.8065944694210487,21.261731934999997,29.946672,17.189615,22.2398645,20.0061565,2.233708,1545.1554415,1.6680620778055508,19.1883270975,25.851109,15.4151325,20.183055250000002,18.19633625,1.9867190000000008,877.5786625000001,1.3678161693846125,19.256617245,23.384075,14.746626,20.03635,18.313661500000002,1.7226884999999967,831.496119,1.6094711141119222,19.3507512975,24.181519,14.971657,20.476434,18.235262,2.2411720000000024,592.35453,1.6775098045624532,19.147094815,26.745613,15.373414,20.033014,18.14482425,1.8881897500000022,701.6668070000001,1.484218185884644,19.8873364875,23.65376,15.703951,20.889944,18.896168749999998,1.9937752500000023,637.3391875,1.8223651270550236,20.037275955,24.823505,16.051033,21.4217695,18.603216,2.8185535,715.2517055000001,1.7705237663981597,20.003322015000002,25.48115,16.298512,20.923640250000002,18.965045250000003,1.958594999999999,730.0682165000001,1.533499902523241,19.518765495,24.67262,15.88748,20.5246795,18.579065500000002,1.945613999999999,1.589243279383597,19.110814519999998,24.661146,15.994982,20.20584125,17.92836175,2.2774794999999983,4.070441745363273,1.867842472174504"

    # Start CSI camera capture
    cap = cv2.VideoCapture(gstreamer_pipeline(), cv2.CAP_GSTREAMER)
    if not cap.isOpened():
        print("Failed to open CSI camera")
        exit()

    LABEL_NAMES = []
    with open(cfg["names"], 'r') as f:
        LABEL_NAMES = [line.strip() for line in f.readlines()]
    
    last_time = time.time()
    interval = 2.0

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
    
        current_time = time.time()

        csi_count = 0
        if current_time - last_time >= interval:

            csi_count = csi_model.predict(fake_csi)

            # Resize frame to model input size
            res_img = cv2.resize(frame, (cfg["width"], cfg["height"]), interpolation=cv2.INTER_LINEAR)
            img = res_img.reshape(1, cfg["height"], cfg["width"], 3)
            img = torch.from_numpy(img.transpose(0, 3, 1, 2)).to(device).float() / 255.0

            # Model inference
            start = time.perf_counter()
            preds = model(img)
            end = time.perf_counter()
            print(f"Inference time: {(end - start) * 1000:.2f} ms")

            # Process predictions
            output = utils.utils.handel_preds(preds, cfg, device)
            output_boxes = utils.utils.non_max_suppression(output, conf_thres=0.3, iou_thres=0.4)

            h, w, _ = frame.shape
            scale_h, scale_w = h / cfg["height"], w / cfg["width"]

            # Draw bounding boxes
            cv_count = 0
            for box in output_boxes[0]:
                box = box.tolist()
                obj_score = box[4]
                category = LABEL_NAMES[int(box[5])]

                #if category == 'person' and obj_score > 0.8:
                if category == 'person':
                    cv_count += 1
                    x1, y1 = int(box[0] * scale_w), int(box[1] * scale_h)
                    x2, y2 = int(box[2] * scale_w), int(box[3] * scale_h)

                    cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 255, 0), 2)
                    cv2.putText(frame, f'{category} {obj_score:.2f}', (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                
            last_time = current_time

        # Display result
        cv2.putText(frame, f"CV: {cv_count}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)
        cv2.putText(frame, f"CSI: {csi_count}", (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)
        cv2.imshow("CSI Camera Detection", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()
nh 
